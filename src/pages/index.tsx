import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import React from "react";

import { api } from "~/utils/api";
import { type Todo } from "@prisma/client";

const Home: NextPage = () => {
  const todos = api.todos.getAll.useQuery();

  function Card({ todo }: { todo: Todo }) {    
    const deleteTodo = api.todos.deleteTodo.useMutation();
  
    const deleteTodoAction = async () => {
      await deleteTodo.mutateAsync(todo)
      await todos.refetch()
    }
    return (
      <div className="card-compact card w-96 bg-base-100 shadow-xl indicator">
        <div className="indicator-item indicator-end">
        <button className="btn-square btn bg-red-600" onClick={deleteTodoAction}>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-6 w-6"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M6 18L18 6M6 6l12 12"
              />
          </svg>
        </button>
              </div>
        <div className="card-body">
          <h2 className="card-title">{todo.title}</h2>
          <p>{todo.description}</p>
        </div>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {todos?.data?.map((todo) => (
            <Card key={todo.id} todo={todo} />
          ))}
          <button className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20">
            <Link href="/createTodo">Create Todo</Link>
          </button>
          <AuthShowcase />
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

